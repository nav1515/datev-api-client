from typing import Any, TypeVar, Optional, BinaryIO, TextIO, TYPE_CHECKING

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

from ..models.problem_details_reason import ProblemDetailsReason
from ..types import UNSET, Unset
from typing import cast
from typing import Union
from uuid import UUID

if TYPE_CHECKING:
  from ..models.problem_details_violation_details import ProblemDetailsViolationDetails





T = TypeVar("T", bound="ProblemDetails")



@_attrs_define
class ProblemDetails:
    """ 
        Attributes:
            type_ (Union[Unset, str]): A URI reference that identifies the problem type. When dereferenced, it provides a
                human-readable documentation for the problem type. When this property is not present, its value is assumed to be
                "about:blank".
            title (Union[Unset, str]): A short, human-readable summary of the problem type.
            request_id (Union[Unset, UUID]): Unique ID of the request.
            reason (Union[Unset, ProblemDetailsReason]): A machine readable reason to distinguish between problem types, may
                be empty.
            status (Union[Unset, int]): The HTTP status code generated by the origin server for this occurrence of the
                problem.
            detail (Union[Unset, str]): A human-readable explanation specific to this occurrence of the problem. Only filled
                in case of errors from the API-Gateway.
            details (Union[Unset, list['ProblemDetailsViolationDetails']]): Additional details in case of validation
                failures (when reason is set to `VALIDATION_FAILED`).
     """

    type_: Union[Unset, str] = UNSET
    title: Union[Unset, str] = UNSET
    request_id: Union[Unset, UUID] = UNSET
    reason: Union[Unset, ProblemDetailsReason] = UNSET
    status: Union[Unset, int] = UNSET
    detail: Union[Unset, str] = UNSET
    details: Union[Unset, list['ProblemDetailsViolationDetails']] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)


    def to_dict(self) -> dict[str, Any]:
        from ..models.problem_details_violation_details import ProblemDetailsViolationDetails
        type_ = self.type_

        title = self.title

        request_id: Union[Unset, str] = UNSET
        if not isinstance(self.request_id, Unset):
            request_id = str(self.request_id)

        reason: Union[Unset, str] = UNSET
        if not isinstance(self.reason, Unset):
            reason = self.reason.value


        status = self.status

        detail = self.detail

        details: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.details, Unset):
            details = []
            for details_item_data in self.details:
                details_item = details_item_data.to_dict()
                details.append(details_item)




        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({
        })
        if type_ is not UNSET:
            field_dict["type"] = type_
        if title is not UNSET:
            field_dict["title"] = title
        if request_id is not UNSET:
            field_dict["request_id"] = request_id
        if reason is not UNSET:
            field_dict["reason"] = reason
        if status is not UNSET:
            field_dict["status"] = status
        if detail is not UNSET:
            field_dict["detail"] = detail
        if details is not UNSET:
            field_dict["details"] = details

        return field_dict



    @classmethod
    def from_dict(cls: type[T], src_dict: dict[str, Any]) -> T:
        from ..models.problem_details_violation_details import ProblemDetailsViolationDetails
        d = src_dict.copy()
        type_ = d.pop("type", UNSET)

        title = d.pop("title", UNSET)

        _request_id = d.pop("request_id", UNSET)
        request_id: Union[Unset, UUID]
        if isinstance(_request_id,  Unset):
            request_id = UNSET
        else:
            request_id = UUID(_request_id)




        _reason = d.pop("reason", UNSET)
        reason: Union[Unset, ProblemDetailsReason]
        if isinstance(_reason,  Unset):
            reason = UNSET
        else:
            reason = ProblemDetailsReason(_reason)




        status = d.pop("status", UNSET)

        detail = d.pop("detail", UNSET)

        details = []
        _details = d.pop("details", UNSET)
        for details_item_data in (_details or []):
            details_item = ProblemDetailsViolationDetails.from_dict(details_item_data)



            details.append(details_item)


        problem_details = cls(
            type_=type_,
            title=title,
            request_id=request_id,
            reason=reason,
            status=status,
            detail=detail,
            details=details,
        )


        problem_details.additional_properties = d
        return problem_details

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
